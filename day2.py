# –î–µ–Ω—å 2 ‚Äì –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ (—Å—Ç—Ä–æ–∫–∏, –∏–Ω–¥–µ–∫—Å—ã, –º–µ—Ç–æ–¥—ã)

# üîπ –ó–ê–î–ê–ß–ê 1: –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–∫—É
def reverse_string(s):
    return s[::-1]

print("–ó–ê–î–ê–ß–ê 1:")
print(reverse_string("–∫–∏–±–µ—Ä—Å–∞–º—É—Ä–∞–π"))  # –π–∞—Ä–∞–º—É—Å—Ä–µ–±–∏–∫


# üîπ –ó–ê–î–ê–ß–ê 2: –°–¥–µ–ª–∞–π –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
def capitalize_first(s):
    return s[0].upper() + s[1:]

print("\n–ó–ê–î–ê–ß–ê 2:")
print(capitalize_first("python"))  # Python


# üîπ –ó–ê–î–ê–ß–ê 3: –ü–æ–¥—Å—á—ë—Ç –≥–ª–∞—Å–Ω—ã—Ö
def count_vowels(s):
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—èAEIOUYaeiouy"
    return sum(1 for char in s if char in vowels)

print("\n–ó–ê–î–ê–ß–ê 3:")
print(count_vowels("–ø—Ä–∏–≤–µ—Ç, –∫–∏–±–µ—Ä–≤–æ–∏–Ω"))  # –ü—Ä–∏–º–µ—Ä: 6

# üîπ –ó–ê–î–ê–ß–ê 4: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
def remove_spaces(s):
    return s.replace(" ", "")

print("\n–ó–ê–î–ê–ß–ê 4:")
print(remove_spaces("—è –∏–¥—É –¥–æ–º–æ–π"))  # Output: "—è–∏–¥—É–¥–æ–º–æ–π"

# üîπ –ó–ê–î–ê–ß–ê 5: –ü–∞–ª–∏–Ω–¥—Ä–æ–º
def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

print("\n–ó–ê–î–ê–ß–ê 5:")
print(is_palindrome("–ö–∞–∑–∞–∫"))         # True
print(is_palindrome("–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞"))  # True

# üîπ –ó–ê–î–ê–ß–ê 6: –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
def longest_string(strings):
    return max(strings, key=len)

print("\n–ó–ê–î–ê–ß–ê 6:")
print(longest_string(["–∫–∏–±–µ—Ä", "—Å–∞–º—É—Ä–∞–π", "Python", "–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä"]))  # –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä

